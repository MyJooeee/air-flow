{"version":3,"sources":["AirFlow/Title.js","AirFlow/AirQuality.js","AirFlow/Weather.js","Leaflet/index.js","Promises/index.js","AirFlow/index.js","App.js","reportWebVitals.js","index.js"],"names":["Title","_ref","loading","name","_jsx","Skeleton","width","height","_jsxs","Typography","variant","children","AirQuality","airQuality","indexQuality","percentage","Weather","weather","imgSrc","icon","title","main","description","alt","temperature","humidity","Stack","sx","flexFlow","alignItems","gap","src","Leaflet","geoloc","longitude","latitude","geolocation","MapContainer","id","center","zoom","scrollWheelZoom","style","margin","ChangeView","TileLayer","attribution","url","Marker","position","Icon","iconUrl","markerIconPng","iconSize","iconAnchor","altitude","Legend","_ref2","useMap","setView","propTypes","PropTypes","array","number","_ref3","Popup","concat","toFixed","fetchApi","callback","fetch","then","res","json","result","error","console","log","topContainer","justifyContent","AirFlow","apiKey","process","airQualityAPI","reverseLocationAPI","weatherFromLocationAPI","refreshAt","setRefreshAt","useState","Date","state","setState","open","message","severity","vertical","horizontal","data","setData","times","co","o3","so2","pm25","setGeoloc","nameLoc","setNameLoc","weatherLoc","setWeatherLoc","loadingNameLoc","setLoadingNameLoc","setIndexQuality","loadingAirQuality","setLoadingAirQuality","loadingWeather","setLoadingWeather","initClock","setInitClock","useEffect","navigator","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","coords","err","setNameLocation","userSpamsApi","setAirQuality","setWeatherLocation","localStorage","setItem","interval","setInterval","clearInterval","handleClose","lastFetch","getItem","moment","diff","async","myData","lenCo","length","lenO3","lenSo2","lenPm25","newCo","list","components","newO3","newSo2","newPm25","pm2_5","push","aqi","newMain","newDescription","newIcon","newTemp","temp","newHumidity","_Fragment","Snackbar","anchorOrigin","autoHideDuration","onClose","Alert","LineChart","xAxis","label","scaleType","valueFormatter","time","format","yAxis","series","left","right","top","bottom","grid","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"kSAgBeA,MAXDC,IAAwB,IAAvB,QAAEC,EAAO,KAAEC,GAAMF,EAC9B,GAAIC,EAAS,OAAOE,cAACC,IAAQ,CAACC,MAAO,IAAKC,OAAQ,KAEhD,OAAOC,eAACC,IAAU,CAACC,QAAQ,KAAIC,SAAA,CAAC,IADlB,iBAC0B,IAAER,EAAK,MAAc,ECWlDS,MAdIX,IAA2C,IAA1C,QAAEC,EAAO,WAAEW,EAAU,aAAEC,GAAab,EACtD,GAAIC,EAAS,OAAOE,cAACC,IAAQ,CAACC,MAAO,IAAKC,OAAQ,KAEhD,GAAqB,IAAjBO,EAAoB,OAAO,KAC/B,IAAIC,EAAa,MAAS,EAAID,GAAgB,EAAK,IAAM,KACzD,OAAON,eAACC,IAAU,CAACC,QAAQ,KAAIC,SAAA,CAAC,IAHhB,YAG0B,IAAEE,EAAWC,EAAe,GAAG,IAAEC,EAAW,MAAc,EC2BvFC,MAhCDf,IAA2B,IAA1B,QAAEC,EAAO,QAAEe,GAAShB,EACjC,GAAIC,EAAU,OAAOE,cAACC,IAAQ,CAACC,MAAO,IAAKC,OAAQ,KACnD,MAAMW,EACJ,qCAAuCD,EAAQE,KAAO,OAClDC,EAAQH,EAAQI,KAChBC,EAAcL,EAAQK,YACtBC,EAAMN,EAAQE,KACdK,EAAcP,EAAQO,YACtBC,EAAWR,EAAQQ,SAMzB,OACEjB,eAACkB,IAAK,CAACC,GANS,CAChBC,SAAU,WACVC,WAAY,SACZC,IAAK,GAGgBnB,SAAA,CACnBP,cAAA,OAAK2B,IAAKb,EAAQE,MAAOA,EAAOG,IAAKA,IACrCf,eAACC,IAAU,CAAAE,SAAA,CACRa,EAAY,YAAOC,EAAS,OAE/BrB,cAACK,IAAU,CAAAE,SACRW,MAEG,E,sFCUCU,MA9BC/B,IAAiB,IAAhB,OAAEgC,GAAQhC,EAE1B,IAAKgC,EAAOC,YAAcD,EAAOE,SAAU,OAAO,KAElD,MAAMC,EAAc,CAACH,EAAOE,SAAUF,EAAOC,WAE7C,OACA1B,eAAC6B,IAAY,CACZC,GAAG,QACHC,OAAQH,EACRI,KAAM,GACNC,iBAAiB,EACjBC,MAAO,CAAEnC,OAAQ,IAAKD,MAAO,IAAKqC,OAAQ,QAAQhC,SAAA,CAElDP,cAACwC,EAAU,CAACL,OAAQH,EAAaI,KAAM,KACvCpC,cAACyC,IAAS,CACVC,YAAY,cACZC,IAAI,uDAEJ3C,cAAC4C,IAAM,CAACC,SAAUb,EAAajB,KAAM,IAAI+B,OAAK,CAACC,QAASC,IAAeC,SAAU,CAAC,GAAI,IAAKC,WAAY,CAAC,GAAI,MAAM3C,SACjHsB,EAAOsB,UAAYnD,cAACoD,EAAM,CAACD,SAAUtB,EAAOsB,eAE/B,EAYhB,MAAMX,EAAaa,IAAuB,IAAtB,OAAElB,EAAM,KAAEC,GAAMiB,EAGnC,OAFYC,cACRC,QAAQpB,EAAQC,GACb,IAAI,EAGZI,EAAWgB,UAAY,CACrBrB,OAAQsB,IAAUC,MAClBtB,KAAMqB,IAAUE,QAGlB,MAAMP,EAASQ,IAAA,IAAC,SAAET,GAAUS,EAAA,OAC3B5D,cAAC6D,IAAK,CAAAtD,SAAA,QAAAuD,OACIX,EAASY,QAAQ,GAAE,MACrB,ECxDHC,EAAWA,CAACrB,EAAKsB,IACZC,MAAMvB,GACVwB,MAAMC,GAAQA,EAAIC,SAClBF,MACEG,GACQA,IAERC,IACGC,QAAQC,IAAIF,GACZN,EAASM,EAAM,IC+TrBG,EAAe,CACnBlD,SAAU,WACVC,WAAY,SACZkD,eAAgB,gBAGHC,MA/TCA,KACd,MAAMC,EAASC,mCACTC,EACJ,+DAAiEF,EAC7DG,EACJ,gEAAkEH,EAC9DI,EACJ,uEACAJ,GAQKK,EAAWC,GAAgBC,mBAAS,IAAIC,OACxCC,EAAOC,GAAYH,mBAAS,CACjCI,MAAM,EACNC,QAAS,KACTC,SAAU,QACVC,SAAU,MACVC,WAAY,WAER,KAAEJ,EAAI,QAAGC,EAAO,SAAEC,EAAQ,SAAEC,EAAQ,WAAEC,GAAeN,GACpDO,EAAMC,GAAWV,mBAAU,CAChCW,MAAO,GACPC,GAAI,GACJC,GAAI,GACJC,IAAK,GACLC,KAAM,MAGDtE,EAAQuE,GAAahB,mBAAS,CAACrD,SAAU,KAAMD,UAAW,KAAMqB,SAAU,QAC1EkD,EAASC,GAAclB,mBAAS,OAChCmB,EAAYC,GAAiBpB,mBAAS,CAC3CnE,KAAM,KACNC,YAAa,KACbH,KAAM,KACNK,YAAa,KACbC,SAAU,QAELoF,EAAgBC,GAAqBtB,oBAAS,IAC9C1E,EAAciG,GAAmBvB,mBAAS,IAC1CwB,EAAmBC,GAAwBzB,oBAAS,IACpD0B,EAAgBC,GAAqB3B,oBAAS,IAC9C4B,EAAWC,GAAgB7B,oBAAS,GAI7C8B,qBAAU,KACN,GAAIC,UAAUnF,YAAa,CACzB,MAAMoF,EAAU,CACdC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,GAKdJ,UAAUnF,YAAYwF,oBACnB3E,IACCuD,EAAU,CACRrE,SAAUc,EAAS4E,OAAO1F,SAC1BD,UAAWe,EAAS4E,OAAO3F,UAC3BqB,SAAUN,EAAS4E,OAAOtE,UAC1B,IAEHuE,IACClD,QAAQC,IAAIiD,GAIZtB,EAAU,CACRrE,SAAU,UACVD,UAAW,UACXqB,SAAU,KAEZmD,EAAW,SACXI,GAAkB,EAAM,GAE1BU,EAEJ,IACC,IAEHF,qBAAU,KACR,GAAIrF,EAAOE,UAAYF,EAAOC,UAAW,CAKvC,GAJI2E,GACFkB,IAGEC,IAAgB,OAEpBC,IACAC,IACAC,aAAaC,QAAQ,YAAa,IAAI3C,MACtC4B,GAAa,EACf,IACC,CAACpF,EAAOE,SAAUF,EAAOC,UAAWD,EAAOsB,WAE9C+D,qBAAU,KACR,GAAIF,EAAW,CACb,MAAMiB,EAAWC,aAAY,KAC3BL,IACAC,IACAC,aAAaC,QAAQ,YAAa,IAAI3C,KAAO,GAC5C,KACH,MAAO,IAAM8C,cAAcF,EAC7B,IACC,CAACjB,IAIN,MAAMoB,EAAcA,KAClB7C,EAAS,IAAKD,EAAOE,MAAM,GAAQ,EAM7BoC,EAAeA,KACnB,MAAMS,EAAYN,aAAaO,QAAQ,aACvC,GAAID,EAAW,CAEb,GADgBE,MAASC,KAAKD,IAAOF,GAAY,YAClC,GAEb,OADA9C,EAAS,IAAKD,EAAOI,SAAU,UAAWD,QAAS,kCAAmCD,MAAM,KACrF,CAEX,CACA,OAAO,CAAK,EAGRqC,EAAgBY,UAEpB,IACE,MAAM9F,EAAMoC,EAAgB,QAAUlD,EAAOE,SAAW,QAAUF,EAAOC,UACnEwC,QAAeN,EAASrB,GAAM+E,IAClCnC,EAAS,IAAKD,EAAOG,QAAS,6BAA8BD,MAAM,GAC5D,IAGR,IAAIkD,EAAS,IAAK7C,GAElB,MAAMG,EAAK0C,EAAO1C,GACZC,EAAKyC,EAAOzC,GACZC,EAAMwC,EAAOxC,IACbC,EAAOuC,EAAOvC,KAEdwC,EAAQ3C,EAAG4C,OACXC,EAAQ5C,EAAG2C,OACXE,EAAS5C,EAAI0C,OACbG,EAAU5C,EAAKyC,OAEfI,EAAQ1E,EAAO2E,KAAK,GAAGC,WAAWlD,GAClCmD,EAAQ7E,EAAO2E,KAAK,GAAGC,WAAWjD,GAClCmD,EAAS9E,EAAO2E,KAAK,GAAGC,WAAWhD,IACnCmD,EAAU/E,EAAO2E,KAAK,GAAGC,WAAWI,MAI1C,GAFAnE,EAAa,IAAIE,MAEbsD,GAAS3C,EAAG2C,EAAQ,KAAOK,GACzBH,GAAS5C,EAAG4C,EAAQ,KAAOM,GAC3BL,GAAU5C,EAAI4C,EAAS,KAAOM,GAC9BL,GAAW5C,EAAK4C,EAAU,KAAOM,EAErC,OAGFrD,EAAGuD,KAAKP,GACR/C,EAAGsD,KAAKJ,GACRjD,EAAIqD,KAAKH,GACTjD,EAAKoD,KAAKF,GACV,MAAMtD,EAAQ2C,EAAO3C,MACrBA,EAAMwD,KAAK,IAAIlE,MAEfqD,EAAS,CAAE3C,QAAOC,KAAIC,KAAIC,MAAKC,QAE/BL,EAAQ4C,GACR/B,EAAgBrC,EAAO2E,KAAK,GAAGhI,KAAKuI,KACpC3C,GAAqB,EAEzB,CAAE,MAAOtC,GACPgB,EAAS,IAAKD,EAAOG,QAAU,oCAAqCD,MAAM,GAC5E,GAIMmC,EAAkBc,UACtB,IACE,MAAM9F,EAAMqC,EAAqB,QAAUnD,EAAOE,SAAW,QAAUF,EAAOC,UACxEwC,QAAeN,EAASrB,GAAM+E,IAClCnC,EAAS,IAAKD,EAAOG,QAAU,+BAAgCD,MAAM,GAC/D,IAERc,EAAWhC,EAAO,GAAGvE,MACrB2G,GAAkB,EACpB,CAAE,MAAOnC,GACPgB,EAAS,IAAKD,EAAOG,QAAU,sCAAuCD,MAAM,GAC9E,GAIIsC,EAAqBW,UACzB,IACE,MAAM9F,EACNsC,EAAyB,QAAUpD,EAAOE,SAAW,QAAUF,EAAOC,UAChEwC,QAAeN,EAASrB,GAAM+E,IAClCnC,EAAS,IAAKD,EAAOG,QAAU,kCAAmCD,MAAM,GAClE,IAGJiE,EAAUnF,EAAOzD,QAAQ,GAAGI,KAC5ByI,EAAiBpF,EAAOzD,QAAQ,GAAGK,YACnCyI,EAAUrF,EAAOzD,QAAQ,GAAGE,KAC5B6I,EAAUtF,EAAOrD,KAAK4I,KACtBC,EAAcxF,EAAOrD,KAAKI,SAGhC,GAAIkF,EAAWtF,OAASwI,GACnBlD,EAAWrF,cAAgBwI,GAC3BnD,EAAWxF,OAAS4I,GACpBpD,EAAWnF,cAAgBwI,GAC3BrD,EAAWlF,WAAayI,EAE3B,OAUFtD,EAPgB,CACdvF,KAAMwI,EACNvI,YAAawI,EACb3I,KAAM4I,EACNvI,YAAawI,EACbvI,SAAUyI,IAGZ/C,GAAkB,EAClB,CAAE,MAAMxC,GACNgB,EAAS,IAAKD,EAAOG,QAAU,yCAA0CD,MAAM,GACjF,GAIF,OACEpF,eAAA2J,WAAA,CAAAxJ,SAAA,CACEP,cAACgK,IAAQ,CACLC,aAAc,CAAEtE,WAAUC,cAC1BsE,iBAAkB,IAClB1E,KAAMA,EACN2E,QAAS/B,EAAY7H,SAErBP,cAACoK,IAAK,CACJD,QAAS/B,EACT1C,SAAUA,EACVpF,QAAQ,SACRiB,GAAI,CAAErB,MAAO,QAASK,SAErBkF,MAGPrF,eAACkB,IAAK,CAAAf,SAAA,CACJH,eAACkB,IAAK,CAACC,GAAImD,EAAanE,SAAA,CACpBP,cAACJ,EAAK,CAACE,QAAS2G,EAAgB1G,KAAMsG,IACtCrG,cAACQ,EAAU,CACTV,QAAS8G,EACTnG,WAhQS,CACjB,eACA,eACA,mBACA,eACA,qBA4PQC,aAAcA,IAEhBV,cAACY,EAAO,CAACd,QAASgH,EAAgBjG,QAAS0F,IAC7CvG,cAAC4B,EAAO,CAACC,OAAQA,OAEnB7B,cAACqK,IAAS,CACRC,MAAO,CACL,CACEC,MAAO,QACP1E,KAAMA,EAAKE,MACXyE,UAAW,OACXC,eAAiBC,GAASnC,IAAOmC,GAAMC,OAAO,cAGlDC,MAAO,CAAC,CAAEL,MAAO,2CACjBM,OAAQ,CACN,CACEN,MAAO,uBACP1E,KAAMA,EAAKG,IAEb,CACEuE,MAAO,aACP1E,KAAMA,EAAKI,IAEb,CACEsE,MAAO,wBACP1E,KAAMA,EAAKK,KAEb,CACEqE,MAAO,gCACP1E,KAAMA,EAAKM,OAGfhG,OAAQ,IACRoC,OAAQ,CAAEuI,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAChDC,KAAM,CAAEvF,UAAU,EAAMC,YAAY,KAEtCxF,eAACC,IAAU,CAACkB,GAAI,CAAE4J,UAAW,UAAW5K,SAAA,CAAC,2CACCP,cAAA,UAAAO,SAAQ,sBAA0B,gBAC5DH,eAAA,UAAAG,SAAA,CAAQ,IAAEgI,IAAOrD,GAAWyF,OAAO,YAAY,QAAW,YAG3E,ECxTQS,MANf,WACE,OACEpL,cAAC4E,EAAO,GAEZ,ECGeyG,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpH,MAAKtE,IAAkD,IAAjD,OAAE2L,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS/L,EACpE2L,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EAAY,GAExB,ECHFO,IAASC,OACP9L,cAAC+L,IAAMC,WAAU,CAAAzL,SACfP,cAACoL,EAAG,MAENa,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.ad6c0006.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Skeleton, Typography } from '@mui/material';\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\nconst Title = ({ loading, name }) => {\r\n  if (loading) return <Skeleton width={150} height={80} />;\r\n    const title = \"Air quality in\";\r\n    return <Typography variant='h4'> {title} {name} </Typography>;\r\n  };\r\n\r\n  Title.propTypes = {\r\n    loading: PropTypes.bool,\r\n    name: PropTypes.string\r\n  };\r\n\r\nexport default Title;","import PropTypes from 'prop-types';\r\nimport { Skeleton, Typography } from '@mui/material';\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\nconst AirQuality = ({ loading, airQuality, indexQuality}) => {\r\n  if (loading) return <Skeleton width={150} height={40} />;\r\n    const quality = \"Quality :\";\r\n    if (indexQuality === 0) return null;\r\n    let percentage = \" (\" + ((6 - indexQuality) / 5) * 100 + \"%)\";\r\n    return <Typography variant='h5'> {quality} {airQuality[indexQuality - 1]} {percentage} </Typography>;\r\n  };\r\n\r\n  AirQuality.propTypes = {\r\n    loading: PropTypes.bool,\r\n    airQuality: PropTypes.array,\r\n    indexQuality: PropTypes.number\r\n  };\r\n\r\nexport default AirQuality;","import PropTypes from 'prop-types';\r\nimport { Skeleton, Stack, Typography } from '@mui/material';\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\nconst Weather = ({ loading, weather }) => {\r\n    if (loading)  return <Skeleton width={180} height={40} />;\r\n    const imgSrc =\r\n      \"https://openweathermap.org/img/wn/\" + weather.icon + \".png\";\r\n    const title = weather.main;\r\n    const description = weather.description;\r\n    const alt = weather.icon;\r\n    const temperature = weather.temperature;\r\n    const humidity = weather.humidity;\r\n    const container = {\r\n      flexFlow: \"row wrap\",\r\n      alignItems: \"center\",\r\n      gap: 1\r\n    };\r\n    return (\r\n      <Stack sx={container}>\r\n        <img src={imgSrc} title={title} alt={alt} />\r\n        <Typography>\r\n          {temperature}°C. | {humidity}%\r\n        </Typography>\r\n        <Typography>\r\n          {description}\r\n        </Typography>\r\n      </Stack>\r\n    );\r\n  };\r\n\r\n  Weather.propTypes = {\r\n    loading: PropTypes.bool,\r\n    weather: PropTypes.object\r\n  };\r\n\r\n  export default Weather;","import PropTypes from 'prop-types';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { MapContainer, Marker, Popup, TileLayer, useMap } from 'react-leaflet';\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\"\r\nimport { Icon } from 'leaflet'\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\nconst Leaflet = ({ geoloc }) => {\r\n\r\n\tif (!geoloc.longitude && !geoloc.latitude) return null;\r\n\r\n\tconst geolocation = [geoloc.latitude, geoloc.longitude];\r\n\r\n\treturn (\r\n\t<MapContainer\r\n\t\tid=\"mapId\"\r\n\t\tcenter={geolocation}\r\n\t\tzoom={14}\r\n\t\tscrollWheelZoom={false}\r\n\t\tstyle={{ height: 180, width: 180, margin: '20px'}}\r\n\t>\r\n\t\t<ChangeView center={geolocation} zoom={14} />\r\n\t\t<TileLayer\r\n\t\tattribution='&copy;AirFlow'\r\n\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t/>\r\n\t\t<Marker position={geolocation} icon={new Icon({iconUrl: markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41]})}>\r\n\t\t{geoloc.altitude && <Legend altitude={geoloc.altitude}/>}\r\n\t</Marker>\r\n\t</MapContainer>\r\n\t);\r\n}\r\n\r\nLeaflet.propTypes = {\r\n  geoloc: PropTypes.object\r\n};\r\n\r\nexport default Leaflet;\r\n\r\n// Local components -------------------------------------------------------------------------\r\n\r\nconst ChangeView = ({ center, zoom }) => {\r\n\tconst map = useMap();\r\n\tmap.setView(center, zoom);\r\n\treturn null;\r\n }\r\n\r\nChangeView.propTypes = {\r\n  center: PropTypes.array,\r\n  zoom: PropTypes.number\r\n}\r\n\r\nconst Legend = ({ altitude }) => (\r\n\t<Popup>\r\n\t\t{`alt. ${altitude.toFixed(2)}m`}\r\n\t</Popup>\r\n)\r\n\r\nLegend.propTypes = {\r\n  altitude: PropTypes.number\r\n}","const fetchApi = (url, callback) => {\r\n    return fetch(url)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          return result\r\n        },\r\n        (error) => {\r\n            console.log(error);\r\n            callback(error)\r\n        }\r\n      );\r\n  };\r\n\r\n  export { fetchApi };","// Core\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from 'moment';\r\n// Components\r\nimport { LineChart } from '@mui/x-charts/LineChart';\r\nimport { Alert, Snackbar, Stack, Typography } from '@mui/material';\r\nimport Title from './Title';\r\nimport AirQuality from './AirQuality';\r\nimport Weather from './Weather';\r\nimport Leaflet from '../Leaflet';\r\n// Logic\r\nimport { fetchApi } from '../Promises';\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\nconst AirFlow = () => {\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n  const airQualityAPI =\r\n    \"https://api.openweathermap.org/data/2.5/air_pollution?appid=\" + apiKey;\r\n  const reverseLocationAPI =\r\n    \"https://api.openweathermap.org/geo/1.0/reverse?limit=1&appid=\" + apiKey;\r\n  const weatherFromLocationAPI =\r\n    \"https://api.openweathermap.org/data/2.5/weather?&units=metric&appid=\" +\r\n    apiKey;\r\n    const airQuality = [\r\n      \"good quality\", // 100%\r\n      \"fair quality\", // 80 %\r\n      \"moderate quality\", // 60%\r\n      \"poor quality\", // 40%\r\n      \"very poor quality\", // 20%\r\n    ];\r\n  const [refreshAt, setRefreshAt] = useState(new Date());\r\n  const [state, setState] = useState({\r\n    open: false,\r\n    message: null,\r\n    severity: 'error',\r\n    vertical: 'top',\r\n    horizontal: 'right',\r\n  });\r\n  const { open , message, severity, vertical, horizontal } = state;\r\n  const [data, setData] = useState ({\r\n    times: [],\r\n    co: [],\r\n    o3: [],\r\n    so2: [],\r\n    pm25: [],\r\n  });\r\n\r\n  const [geoloc, setGeoloc] = useState({latitude: null, longitude: null, altitude: null});\r\n  const [nameLoc, setNameLoc] = useState(null);\r\n  const [weatherLoc, setWeatherLoc] = useState({\r\n    main: null,\r\n    description: null,\r\n    icon: null,\r\n    temperature: null,\r\n    humidity: null,\r\n  });\r\n  const [loadingNameLoc, setLoadingNameLoc] = useState(true);\r\n  const [indexQuality, setIndexQuality] = useState(0);\r\n  const [loadingAirQuality, setLoadingAirQuality] = useState(true);\r\n  const [loadingWeather, setLoadingWeather] = useState(true);\r\n  const [initClock, setInitClock] = useState(false);\r\n\r\n\r\n// Effects -------------------------------------------------------------------------\r\nuseEffect(() => {\r\n    if (navigator.geolocation) {\r\n      const options = {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0,\r\n      };\r\n      // Position de l'utilisateur en temps réel\r\n      // navigator.geolocation.watchPosition(\r\n      // Position de l'utilisateur au premier lancement\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setGeoloc({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            altitude: position.coords.altitude\r\n          });\r\n        },\r\n        (err) => {\r\n          console.log(err);\r\n\r\n          // Service location denied by user\r\n          // Default Paris\r\n          setGeoloc({\r\n            latitude: 48.856614,\r\n            longitude: 2.3522219,\r\n            altitude: 35\r\n          });\r\n          setNameLoc('Paris');\r\n          setLoadingNameLoc(false);\r\n        },\r\n        options\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (geoloc.latitude && geoloc.longitude) {\r\n      if (loadingNameLoc) {\r\n        setNameLocation();\r\n      }\r\n\r\n      if (userSpamsApi()) return;\r\n\r\n      setAirQuality();\r\n      setWeatherLocation();\r\n      localStorage.setItem(\"lastFetch\", new Date());\r\n      setInitClock(true);\r\n    }\r\n  }, [geoloc.latitude, geoloc.longitude, geoloc.altitude]);\r\n\r\n  useEffect(() => {\r\n    if (initClock) {\r\n      const interval = setInterval(() => {\r\n        setAirQuality();\r\n        setWeatherLocation();\r\n        localStorage.setItem(\"lastFetch\", new Date());\r\n      }, 5*60*1000 ); // Every 5 minutes\r\n      return () => clearInterval(interval); \r\n    }\r\n  }, [initClock]);\r\n\r\n// Handlers -------------------------------------------------------------------------\r\n\r\nconst handleClose = () => {\r\n  setState({ ...state, open: false });\r\n};\r\n\r\n// Functions -------------------------------------------------------------------------\r\n\r\n  // Avoid to spam API\r\n  const userSpamsApi = () => {\r\n    const lastFetch = localStorage.getItem(\"lastFetch\");\r\n    if (lastFetch) {\r\n      const seconds = moment().diff(moment(lastFetch), 'seconds');\r\n      if (seconds <= 10) {\r\n        setState({ ...state, severity: 'warning', message: 'Retry to fetch API later please', open: true });\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const setAirQuality = async () => {\r\n\r\n    try {\r\n      const url = airQualityAPI + \"&lat=\" + geoloc.latitude + \"&lon=\" + geoloc.longitude;\r\n      const result = await fetchApi(url, (err) => {\r\n        setState({ ...state, message: 'Air quality data API error', open: true });\r\n        return;\r\n      });\r\n\r\n      let myData = { ...data };\r\n\r\n      const co = myData.co;\r\n      const o3 = myData.o3;\r\n      const so2 = myData.so2;\r\n      const pm25 = myData.pm25;\r\n\r\n      const lenCo = co.length;\r\n      const lenO3 = o3.length;\r\n      const lenSo2 = so2.length;\r\n      const lenPm25 = pm25.length;\r\n      \r\n      const newCo = result.list[0].components.co;\r\n      const newO3 = result.list[0].components.o3;\r\n      const newSo2 = result.list[0].components.so2;\r\n      const newPm25 = result.list[0].components.pm2_5;\r\n\r\n      setRefreshAt(new Date());\r\n      // If no data has changed\r\n      if((lenCo && co[lenCo - 1] === newCo)\r\n        && (lenO3 && o3[lenO3 - 1] === newO3)\r\n        && (lenSo2 && so2[lenSo2 - 1] === newSo2)\r\n        && (lenPm25 && pm25[lenPm25 - 1] === newPm25)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      co.push(newCo);\r\n      o3.push(newO3);\r\n      so2.push(newSo2);\r\n      pm25.push(newPm25);\r\n      const times = myData.times;\r\n      times.push(new Date());\r\n\r\n      myData = { times, co, o3, so2, pm25 };\r\n\r\n      setData(myData);\r\n      setIndexQuality(result.list[0].main.aqi);\r\n      setLoadingAirQuality(false);\r\n\r\n  } catch (error) {\r\n    setState({ ...state, message:  'Air quality data processing error', open: true });\r\n  }\r\n    \r\n  };\r\n\r\n  const setNameLocation = async () => {\r\n    try {\r\n      const url = reverseLocationAPI + \"&lat=\" + geoloc.latitude + \"&lon=\" + geoloc.longitude;\r\n      const result = await fetchApi(url, (err) => {\r\n        setState({ ...state, message:  'Name location data API error', open: true });\r\n        return;\r\n      });\r\n      setNameLoc(result[0].name);\r\n      setLoadingNameLoc(false);\r\n    } catch (error) {\r\n      setState({ ...state, message:  'Name location data processing error', open: true });\r\n    }\r\n    \r\n  };\r\n\r\n  const setWeatherLocation = async () => {\r\n    try {\r\n      const url =\r\n      weatherFromLocationAPI + \"&lat=\" + geoloc.latitude + \"&lon=\" + geoloc.longitude;\r\n      const result = await fetchApi(url, (err) => {\r\n        setState({ ...state, message:  'Weather location data API error', open: true });\r\n        return;\r\n      });\r\n\r\n    const newMain = result.weather[0].main;\r\n    const newDescription = result.weather[0].description;\r\n    const newIcon = result.weather[0].icon;\r\n    const newTemp = result.main.temp;\r\n    const newHumidity = result.main.humidity;\r\n\r\n    // If no data has changed\r\n    if (weatherLoc.main === newMain\r\n      && weatherLoc.description === newDescription\r\n      && weatherLoc.icon === newIcon\r\n      && weatherLoc.temperature === newTemp\r\n      && weatherLoc.humidity === newHumidity\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const weather = {\r\n      main: newMain,\r\n      description: newDescription,\r\n      icon: newIcon,\r\n      temperature: newTemp,\r\n      humidity: newHumidity,\r\n    };\r\n    setWeatherLoc(weather);\r\n    setLoadingWeather(false);\r\n    } catch(error) {\r\n      setState({ ...state, message:  'Weather location data processing error', open: true });\r\n    }\r\n  };\r\n\r\n  // JSX -------------------------------------------------------------------------\r\n  return (\r\n    <>\r\n      <Snackbar\r\n          anchorOrigin={{ vertical, horizontal }}\r\n          autoHideDuration={5000}\r\n          open={open}\r\n          onClose={handleClose}\r\n        >\r\n          <Alert\r\n            onClose={handleClose}\r\n            severity={severity}\r\n            variant=\"filled\"\r\n            sx={{ width: '100%' }}\r\n          >\r\n            {message}\r\n          </Alert>\r\n          </Snackbar>\r\n      <Stack>\r\n        <Stack sx={topContainer}>\r\n            <Title loading={loadingNameLoc} name={nameLoc}/>\r\n            <AirQuality \r\n              loading={loadingAirQuality} \r\n              airQuality={airQuality} \r\n              indexQuality={indexQuality}\r\n            />\r\n            <Weather loading={loadingWeather} weather={weatherLoc} />\r\n          <Leaflet geoloc={geoloc} />\r\n        </Stack>\r\n        <LineChart\r\n          xAxis={[\r\n            {\r\n              label: \"Hours\",\r\n              data: data.times,\r\n              scaleType: \"time\",\r\n              valueFormatter: (time) => moment(time).format(\"HH:mm:ss\")\r\n            },\r\n          ]}\r\n          yAxis={[{ label: \"Concentration of particles, μg/m3\" }]}\r\n          series={[\r\n            {\r\n              label: \"CO (Carbon monoxide)\",\r\n              data: data.co,\r\n            },\r\n            {\r\n              label: \"O3 (Ozone)\",\r\n              data: data.o3,\r\n            },\r\n            {\r\n              label: \"SO2 (Sulphur dioxide)\",\r\n              data: data.so2,\r\n            },\r\n            {\r\n              label: \"PM2.5 (Fine particles matter)\",\r\n              data: data.pm25,\r\n            }\r\n          ]}\r\n          height={400}\r\n          margin={{ left: 60, right: 30, top: 30, bottom: 60 }}\r\n          grid={{ vertical: true, horizontal: true }}\r\n        />\r\n        <Typography sx={{ textAlign: 'center' }}>\r\n          Air Flow detects changes in air quality <strong> every 5 minutes </strong> \r\n           (last check: <strong> {moment(refreshAt).format(\"HH:mm:ss\")}) </strong>.\r\n        </Typography>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\n// Styles -------------------------------------------------------------------------\r\nconst topContainer = {\r\n  flexFlow: \"row wrap\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-around\",\r\n};\r\n\r\nexport default AirFlow;\r\n","import './App.css'\r\n// import axios from 'axios'\r\n// const axios = require('axios')\r\nimport AirFlow from './AirFlow/index.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <AirFlow/>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}