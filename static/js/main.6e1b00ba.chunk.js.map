{"version":3,"sources":["Leaflet/Leaflet.js","AirFlow/AirFlow.js","App.js","reportWebVitals.js","index.js"],"names":["Leaflet","coordinates","altitude","ChangeView","center","zoom","useMap","setView","popup","Popup","toFixed","MapContainer","id","scrollWheelZoom","style","height","width","margin","TileLayer","attribution","url","Marker","position","icon","Icon","iconUrl","markerIconPng","iconSize","iconAnchor","AirFlow","props","getData","getAirFlowData","getNameLocation","getWeatherLocation","getDataLine","labels","state","label","datasets","data","co","fill","backgroundColor","borderColor","o3","so2","pm2_5","getOptionsLine","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","airQualityAPI","latitude","longitude","fetch","then","res","json","result","element","list","components","push","newLabel","Date","toLocaleTimeString","indexQuality","main","aqi","setState","error","console","log","reverseLocationAPI","nameLocation","name","weatherFromLocationAPI","weather","description","temperature","temp","humidity","weatherLocation","renderTitle","renderAirQuality","airQuality","renderWeather","imgSrc","title","alt","className","css","display","flexFlow","alignItems","src","fontSize","marginLeft","appKey","refreshAt","moment","format","navigator","geolocation","getCurrentPosition","coords","err","enableHighAccuracy","timeout","maximumAge","this","line","setInterval","clearInterval","justifyContent","textAlign","options","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e1b00ba.chunk.js","sourcesContent":["import 'leaflet/dist/leaflet.css';\r\nimport { MapContainer, Marker, Popup, TileLayer, useMap } from 'react-leaflet';\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\"\r\nimport {Icon} from 'leaflet'\r\n\r\nexport default function Leaflet({ coordinates, altitude }) {\r\n\r\n\tfunction ChangeView({ center, zoom }) {\r\n\t\tconst map = useMap();\r\n\t\tmap.setView(center, zoom);\r\n\t\treturn null;\r\n\t }\r\n\r\n\t let popup = null;\r\n\t if (altitude)\r\n   popup = (\r\n     <Popup>\r\n       {`alt. ${altitude.toFixed(2)}m`}\r\n     </Popup>\r\n   )\r\n\r\n\treturn (\r\n\t\t\t<MapContainer\r\n\t\t      id=\"mapId\"\r\n\t\t\t    center={coordinates}\r\n\t\t      zoom={14}\r\n\t\t      scrollWheelZoom={false}\r\n\t\t      style={{ height: 180, width: 180, margin: '20px'}}\r\n\t\t    >\r\n\t\t\t\t <ChangeView center={coordinates} zoom={14} />\r\n\t\t\t      <TileLayer\r\n\t\t\t        attribution='&copy;AirFlow'\r\n\t\t\t        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t      />\r\n\t\t\t\t  <Marker position={coordinates} icon={new Icon({iconUrl: markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41]})}>\r\n\t\t\t      {popup}\r\n\t\t\t    </Marker>\r\n\t\t    </MapContainer>\r\n\t);\r\n}\r\n","import React from 'react'\r\n// https://www.npmjs.com/package/react-chartjs-2\r\nimport { Line } from 'react-chartjs-2'\r\nimport { css } from '@emotion/css'\r\nimport { Leaflet } from '../Leaflet/index.js'\r\nimport moment from 'moment';\r\n\r\nexport default class AirFlow extends React.Component {\r\n\r\n\t// Constructor ----------------------------------------------------------------\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tconst appKey = '43cebb6f101584f15a47a1581d009ee7'\r\n\t\tthis.airQualityAPI = 'https://api.openweathermap.org/data/2.5/air_pollution?appid=' + appKey\r\n\t\tthis.reverseLocationAPI = 'https://api.openweathermap.org/geo/1.0/reverse?limit=1&appid=' + appKey\r\n\t\tthis.weatherFromLocationAPI = 'https://api.openweathermap.org/data/2.5/weather?&units=metric&appid=' + appKey\r\n\r\n\r\n\t\tthis.airQuality = [\r\n\t\t\t'loading...',\r\n\t\t\t'good quality', // 100%\r\n\t\t\t'fair quality', // 80 %\r\n\t\t\t'moderate quality', // 60%\r\n\t\t\t'poor quality', // 40%\r\n\t\t\t'very poor quality' // 20%\r\n\t\t]\r\n\t\tthis.state = {\r\n      refreshAt: moment().format('HH:mm:ss'),\r\n\t\t\tdata: {\r\n\t\t\t\tco: [],\r\n\t\t\t\to3: [],\r\n\t\t\t\tso2: [],\r\n\t\t\t\tpm2_5: []\r\n\t\t\t},\r\n\t\t\tlabel: [],\r\n\t\t\tindexQuality: 0,\r\n\t\t\t// Paris by default\r\n\t\t\tlatitude: 48.856614,\r\n\t\t\tlongitude: 2.3522219,\r\n\t\t\taltitude: 35,\r\n\t\t\tnameLocation: null,\r\n\t\t\tweatherLocation: null\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (navigator.geolocation) {\r\n\t\t\tconst options = {\r\n\t\t\t\t  enableHighAccuracy: true,\r\n\t\t\t\t  timeout: 5000,\r\n\t\t\t\t  maximumAge: 0\r\n\t\t\t};\r\n\t\t\t// Position de l'utilisateur en temps rÃ©el\r\n\t\t\t// navigator.geolocation.watchPosition(\r\n\t\t\t// Position de l'utilisateur au premier lancement\r\n\t\t\tnavigator.geolocation.getCurrentPosition(\r\n\t\t\t\t(position) => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tlatitude: position.coords.latitude,\r\n\t\t\t\t\t\tlongitude: position.coords.longitude,\r\n\t\t\t\t\t\taltitude: position.coords.altitude\r\n\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\tthis.getData()\r\n\t\t\t\t\t})},\r\n\t\t\t\t(err) => {\r\n          // Service location denied by user\r\n          this.getData()\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t},\r\n\t\t\t\toptions\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tthis.line = setInterval(\r\n\t\t\t() => {\r\n        this.setState({ refreshAt: moment().format('HH:mm:ss')})\r\n\t\t\t\tthis.getAirFlowData()\r\n\t\t\t\tthis.getWeatherLocation()\r\n\t\t\t},\r\n\t\t\t1000*60*5\r\n\t\t)\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.line);\r\n\t}\r\n\r\n// Functions ----------------------------------------------------------------\r\n\r\n  getData = () => {\r\n    this.getAirFlowData()\r\n    this.getNameLocation()\r\n    this.getWeatherLocation()\r\n  }\r\n\r\n\tgetDataLine = () => {\r\n\t\treturn {\r\n\t\t\tlabels: this.state.label,\r\n\t\t\tdatasets: [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Ð¡oncentration of CO (Carbon monoxide), Î¼g/m3',\r\n\t\t\t\t\tdata: this.state.data.co,\r\n\t\t\t\t\tfill: false,\r\n\t\t\t\t\tbackgroundColor: 'rgb(255, 99, 132)',\r\n\t\t\t\t\tborderColor: 'rgba(255, 99, 132, 0.3)',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Ð¡oncentration of O3 (Ozone), Î¼g/m3',\r\n\t\t\t\t\tdata: this.state.data.o3,\r\n\t\t\t\t\tfill: false,\r\n\t\t\t\t\tbackgroundColor: 'rgb(0, 140, 255)',\r\n\t\t\t\t\tborderColor: 'rgba(0, 140, 255, 0.3)',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Ð¡oncentration of SO2 (Sulphur dioxide), Î¼g/m3',\r\n\t\t\t\t\tdata: this.state.data.so2,\r\n\t\t\t\t\tfill: false,\r\n\t\t\t\t\tbackgroundColor: 'rgb(199, 140, 255)',\r\n\t\t\t\t\tborderColor: 'rgba(199, 140, 255, 0.3)',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Ð¡oncentration of PM2.5 (Fine particles matter), Î¼g/m3',\r\n\t\t\t\t\tdata: this.state.data.pm2_5,\r\n\t\t\t\t\tfill: false,\r\n\t\t\t\t\tbackgroundColor: 'rgb(67, 245, 123)',\r\n\t\t\t\t\tborderColor: 'rgba(67, 245, 123, 0.3)',\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tgetOptionsLine = () => {\r\n\t\treturn {\r\n\t\t\tscales: {\r\n\t\t\t\tyAxes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\tbeginAtZero: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tmaintainAspectRatio: false\r\n\t\t}\r\n\t}\r\n\r\n\tgetAirFlowData = () => {\r\n\r\n\t\tconst url = this.airQualityAPI + '&lat='+this.state.latitude+'&lon='+this.state.longitude\r\n\r\n\t\tfetch(url)\r\n\t\t.then(res => res.json())\r\n\t\t.then(\r\n\t\t\t(result) => {\r\n\r\n\t\t\t\tlet data = {...this.state.data}\r\n\r\n\t\t\t\tconst co = data.co\r\n\t\t\t\tlet element = result.list[0].components.co\r\n\t\t\t\tco.push(element)\r\n\r\n\t\t\t\tconst o3 = data.o3\r\n\t\t\t\telement = result.list[0].components.o3\r\n\t\t\t\to3.push(element)\r\n\r\n\t\t\t\tconst so2 = data.so2\r\n\t\t\t\telement = result.list[0].components.so2\r\n\t\t\t\tso2.push(element)\r\n\r\n\t\t\t\tconst pm2_5 = data.pm2_5\r\n\t\t\t\telement = result.list[0].components.pm2_5\r\n\t\t\t\tpm2_5.push(element)\r\n\r\n\t\t\t\tdata = {co, o3, so2, pm2_5}\r\n\r\n\t\t\t\tconst label = [...this.state.label]\r\n\t\t\t\tconst initDate = new Date()\r\n\t\t\t\tconst newLabel = initDate.toLocaleTimeString()\r\n\t\t\t\tlabel.push(newLabel)\r\n\r\n\t\t\t\tconst indexQuality = result.list[0].main.aqi\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tdata : data,\r\n\t\t\t\t\tlabel: label,\r\n\t\t\t\t\tindexQuality: indexQuality\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tgetNameLocation = () => {\r\n\t\tconst url = this.reverseLocationAPI + '&lat='+this.state.latitude+'&lon='+this.state.longitude\r\n\t\tfetch(url)\r\n\t\t.then(res => res.json())\r\n\t\t.then(\r\n\t\t\t(result) => {\r\n\t\t\t\tthis.setState({ nameLocation: result[0].name })\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tgetWeatherLocation = () => {\r\n\t\tconst url = this.weatherFromLocationAPI + '&lat='+this.state.latitude+'&lon='+this.state.longitude\r\n\t\tfetch(url)\r\n\t\t.then(res => res.json())\r\n\t\t.then(\r\n\t\t\t(result) => {\r\n\t\t\t\tconst weather = {\r\n\t\t\t\t\tmain: result.weather[0].main,\r\n\t\t\t\t\tdescription: result.weather[0].description,\r\n\t\t\t\t\ticon: result.weather[0].icon,\r\n\t\t\t\t\ttemperature: result.main.temp,\r\n\t\t\t\t\thumidity: result.main.humidity,\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({ weatherLocation: weather })\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// Renderers ----------------------------------------------------------------\r\n\trenderTitle = () => {\r\n\t\tif (!this.state.nameLocation) return 'Loading...'\r\n\t\treturn 'Air quality in ' + this.state.nameLocation\r\n\t}\r\n\r\n\trenderAirQuality = () => {\r\n\t\tlet airQuality = 'Quality : '+this.airQuality[this.state.indexQuality]\r\n\t\treturn airQuality += (this.state.indexQuality !== 0) ? ' ('+((6-this.state.indexQuality)/5)*100+'%)': ''\r\n\t}\r\n\r\n\trenderWeather = () => {\r\n\t\tif (!this.state.weatherLocation) return null\r\n\t\tconst imgSrc = \"https://openweathermap.org/img/wn/\"+this.state.weatherLocation.icon+\".png\"\r\n\t\tconst title = this.state.weatherLocation.main\r\n\t\tconst description = this.state.weatherLocation.description\r\n\t\tconst alt = this.state.weatherLocation.icon\r\n\t\tconst temperature = this.state.weatherLocation.temperature\r\n\t\tconst humidity = this.state.weatherLocation.humidity\r\n\t\tconst container = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexFlow: 'row wrap',\r\n\t\t\talignItems: 'center'\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className={css(container)}>\r\n\t\t\t\t<img src={imgSrc} title={title} alt={alt}/>\r\n\t\t\t\t<span className={css({fontSize: '1.2rem'})}> {temperature}Â°C. | {humidity}%</span>\r\n\t\t\t\t<span className={css({fontSize: '1rem', marginLeft: '5px'})}> {description} </span>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\t// https://sevketyalcin.com/blog/responsive-charts-using-Chart.js-and-react-chartjs-2/\r\n\t\tconst canvasContainer = {\r\n\t\t\theight: '60vh' // vh : viewport height\r\n\t\t}\r\n\r\n\t\t// Parent\r\n\t\tconst topContainer = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\t// flexFlow: row wrap, correspond Ã  :\r\n\t\t\t// flexDirection: 'row' : direction : ligne ou colonne\r\n\t\t\t// flewWrap: 'wrap' : bascule en ligne ou colonne si espace insuffisant\r\n\t\t\tflexFlow: 'row wrap',\r\n\t\t\talignItems: 'center', // baseline : ajuste les enfants verticalement sur leur base\r\n\t\t\tjustifyContent: 'space-around' // ou space-evenly\r\n\t\t}\r\n\r\n\t\tconst bottomContainer = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tjustifyContent: 'center'\r\n\t\t}\r\n\r\n\t\t// Enfant\r\n\t\t// flex : { flex-grow flex-shrink flex-basis }\r\n\t\t// flex-grow : l'enfant choisi occupe le maximum d'espace\r\n\t\t// Exemple : flex: 1 1 auto\r\n\r\n\t\treturn (\r\n\t\t\t<div className={css(canvasContainer)}>\r\n\t\t\t\t<div className={css(topContainer)}>\r\n\t\t\t\t\t<h1 className={css({ textAlign: 'center' })}> {this.renderTitle()} </h1>\r\n\t\t\t\t\t<h2> {this.renderAirQuality()} </h2>\r\n\t\t\t\t\t<h2> {this.renderWeather()} </h2>\r\n\t\t\t\t\t<Leaflet coordinates={[this.state.latitude, this.state.longitude]} altitude={this.state.altitude}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Line\r\n\t\t\t\t\theight={550}\r\n\t\t\t\t\twidth={1100}\r\n\t\t\t\t\tdata={this.getDataLine()}\r\n\t\t\t\t\toptions={this.getOptionsLine()}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={css(bottomContainer)}>\r\n\t\t\t\t\t<small>\r\n\t\t\t\t\t\tAuto refresh data air quality <strong> every 5 minutes</strong> <i> ({this.state.refreshAt}). </i>\r\n\t\t\t\t\t</small>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import './App.css'\r\n// import axios from 'axios'\r\n// const axios = require('axios')\r\nimport { AirFlow } from './AirFlow/index.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <AirFlow/>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}